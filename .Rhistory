factor(rep(levels(pull(df, pr))[1], length(levels(pull(df, pred)))), levels=levels(pull(df, pr)))) %>%
bind_cols %>%
set_names(preds.fact.Shrub))
nd[,pred] <- factor(levels(pull(df, pred)), levels = levels(pull(df, pred)))
mm <- model.matrix(as.formula(paste("~", paste(preds.Shrub, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Shrub, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Shrub), mm))
nd
}) %>% set_names(preds.fact.Shrub)
outs.Shrub = list(
model = m.Shrub,
summary = s.Shrub,
drop = drop.Shrub,
r2 = r2.Shrub,
varimp = varimp.r2.Shrub,
preds = preds.Shrub,
preds.cont = preds.cont.Shrub,
preds.fact = preds.fact.Shrub,
nds.cont = nds.cont.Shrub,
nds.fact = nds.fact.Shrub
)
save(outs.Shrub, file = "outs.Shrub.RData")
m.Canopy <- outs.Canopy$model
# model outputs -------------------
(s.Canopy <- summary(m.Canopy))
(drop.Canopy <- drop1(m.Canopy, test="Chisq"))
(r2.Canopy <- r2(m.Canopy))
(preds.Canopy <- all.vars(formula(m.Canopy))[-1][-6])
preds.cont.Canopy <- preds.Canopy[sapply(preds.Canopy, function(pred) is.numeric(pull(df, pred)))]
preds.fact.Canopy <- preds.Canopy[sapply(preds.Canopy, function(pred) is.factor(pull(df, pred)))]
varimp.r2.Canopy <- sapply(preds.Canopy, function(pred){
r2.Canopy$R2_marginal - r2(update(m.Canopy, paste("~.-", pred, sep="")))$R2_marginal
}) %>% set_names(preds.Canopy)
# predictions
nds.cont.Canopy <- lapply(preds.cont.Canopy, function(pred){
nd <- lapply(preds.cont.Canopy, function(pr) rep(mean(pull(df, pr)), 100)) %>%
bind_cols %>%
set_names(preds.cont.Canopy)
nd[,pred] <- seq(min(pull(df, pred)),  max(pull(df, pred)), l=100)
mm <- model.matrix(as.formula(paste("~", paste(preds.Canopy, collapse = "+"), sep="")), data=nd)
nd$y <- mm %*% fixef(m.Canopy)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Canopy), mm))
nd
}) %>% set_names(preds.cont.Canopy)
outs.Canopy = list(
model = m.Canopy,
summary = s.Canopy,
drop = drop.Canopy,
r2 = r2.Canopy,
varimp = varimp.r2.Canopy,
preds = preds.Canopy,
preds.cont = preds.cont.Canopy,
preds.fact = NULL,
nds.cont = nds.cont.Canopy,
nds.fact = NULL
)
save(outs.Canopy, file = "outs.Canopy.RData")
m.Cavity <- outs.Cavity$model
# model outputs -------------------
(s.Cavity <- summary(m.Cavity))
(drop.Cavity <- drop1(m.Cavity, test="Chisq"))
(r2.Cavity <- r2(m.Cavity))
(preds.Cavity <- all.vars(formula(m.Cavity))[-1][-10])
preds.cont.Cavity <- preds.Cavity[sapply(preds.Cavity, function(pred) is.numeric(pull(df, pred)))]
preds.fact.Cavity <- preds.Cavity[sapply(preds.Cavity, function(pred) is.factor(pull(df, pred)))]
# varimp.r2.Cavity <- sapply(preds.Cavity, function(pred){
#   r2.Cavity$R2_marginal - r2(update(m.Cavity, paste("~.-", pred, sep="")))$R2_marginal
# }) %>% set_names(preds.Cavity)
varimp.r2.Cavity <- sapply(preds.Cavity, function(pred){
r2.Cavity$R2_Nagelkerke - r2(update(m.Cavity, paste("~.-", pred, sep="")))$R2_Nagelkerke
}) %>% set_names(preds.Cavity)
# predictions
nds.cont.Cavity <- lapply(preds.cont.Cavity, function(pred){
nd <- lapply(preds.cont.Cavity, function(pr) rep(mean(pull(df, pr)), 100)) %>%
bind_cols %>%
set_names(preds.cont.Cavity) %>%
cbind(lapply(preds.fact.Cavity, function(pr) factor(rep(levels(pull(df, pr))[1], 100), levels=levels(pull(df, pr)))) %>%
bind_cols %>%
set_names(preds.fact.Cavity))
nd[,pred] <- seq(min(pull(df, pred)),  max(pull(df, pred)), l=100)
mm <- model.matrix(as.formula(paste("~", paste(preds.Cavity, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Cavity, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Cavity), mm))
nd
}) %>% set_names(preds.cont.Cavity)
nds.fact.Cavity <- lapply(preds.fact.Cavity, function(pred){
nd <- lapply(preds.cont.Cavity, function(pr) rep(mean(pull(df, pr)), length(levels(pull(df, pred))))) %>%
bind_cols %>%
set_names(preds.cont.Cavity) %>%
cbind(lapply(preds.fact.Cavity, function(pr)
factor(rep(levels(pull(df, pr))[1], length(levels(pull(df, pred)))), levels=levels(pull(df, pr)))) %>%
bind_cols %>%
set_names(preds.fact.Cavity))
nd[,pred] <- factor(levels(pull(df, pred)), levels = levels(pull(df, pred)))
mm <- model.matrix(as.formula(paste("~", paste(preds.Cavity, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Cavity, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Cavity), mm))
nd
}) %>% set_names(preds.fact.Cavity)
outs.Cavity = list(
model = m.Cavity,
summary = s.Cavity,
drop = drop.Cavity,
r2 = r2.Cavity,
varimp = varimp.r2.Cavity,
preds = preds.Cavity,
preds.cont = preds.cont.Cavity,
preds.fact = preds.fact.Cavity,
nds.cont = nds.cont.Cavity,
nds.fact = nds.fact.Cavity
)
save(outs.Cavity, file = "outs.Cavity.RData")
m.Insect <- outs.Insect$model
# model outputs -------------------
(s.Insect <- summary(m.Insect))
(drop.Insect <- drop1(m.Insect, test="Chisq"))
(r2.Insect <- r2(m.Insect))
(preds.Insect <- all.vars(formula(m.Insect))[-1][-10])
preds.cont.Insect <- preds.Insect[sapply(preds.Insect, function(pred) is.numeric(pull(df, pred)))]
preds.fact.Insect <- preds.Insect[sapply(preds.Insect, function(pred) is.factor(pull(df, pred)))]
# varimp.r2.Insect <- sapply(preds.Insect, function(pred){
#   r2.Insect$R2_marginal - r2(update(m.Insect, paste("~.-", pred, sep="")))$R2_marginal
# }) %>% set_names(preds.Insect)
varimp.r2.Insect <- sapply(preds.Insect, function(pred){
r2.Insect$R2_Nagelkerke - r2(update(m.Insect, paste("~.-", pred, sep="")))$R2_Nagelkerke
}) %>% set_names(preds.Insect)
# predictions
nds.cont.Insect <- lapply(preds.cont.Insect, function(pred){
nd <- lapply(preds.cont.Insect, function(pr) rep(mean(pull(df, pr)), 100)) %>%
bind_cols %>%
set_names(preds.cont.Insect) %>%
cbind(lapply(preds.fact.Insect, function(pr) factor(rep(levels(pull(df, pr))[1], 100), levels=levels(pull(df, pr)))) %>%
bind_cols %>%
set_names(preds.fact.Insect))
nd[,pred] <- seq(min(pull(df, pred)),  max(pull(df, pred)), l=100)
mm <- model.matrix(as.formula(paste("~", paste(preds.Insect, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Insect, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Insect), mm))
nd
}) %>% set_names(preds.cont.Insect)
nds.fact.Insect <- lapply(preds.fact.Insect, function(pred){
nd <- lapply(preds.cont.Insect, function(pr) rep(mean(pull(df, pr)), length(levels(pull(df, pred))))) %>%
bind_cols %>%
set_names(preds.cont.Insect) %>%
cbind(lapply(preds.fact.Insect, function(pr)
factor(rep(levels(pull(df, pr))[1], length(levels(pull(df, pred)))), levels=levels(pull(df, pr)))) %>%
bind_cols %>%
set_names(preds.fact.Insect))
nd[,pred] <- factor(levels(pull(df, pred)), levels = levels(pull(df, pred)))
mm <- model.matrix(as.formula(paste("~", paste(preds.Insect, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Insect, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Insect), mm))
nd
}) %>% set_names(preds.fact.Insect)
outs.Insect = list(
model = m.Insect,
summary = s.Insect,
drop = drop.Insect,
r2 = r2.Insect,
varimp = varimp.r2.Insect,
preds = preds.Insect,
preds.cont = preds.cont.Insect,
preds.fact = preds.fact.Insect,
nds.cont = nds.cont.Insect,
nds.fact = nds.fact.Insect
)
save(outs.Insect, file = "outs.Insect.RData")
m.Granivor <- outs.Granivor$model
# model outputs -------------------
(s.Granivor <- summary(m.Granivor))
(drop.Granivor <- drop1(m.Granivor, test="Chisq"))
(r2.Granivor <- r2(m.Granivor))
(preds.Granivor <- all.vars(formula(m.Granivor))[-1][-10])
preds.cont.Granivor <- preds.Granivor[sapply(preds.Granivor, function(pred) is.numeric(pull(df, pred)))]
preds.fact.Granivor <- preds.Granivor[sapply(preds.Granivor, function(pred) is.factor(pull(df, pred)))]
# varimp.r2.Granivor <- sapply(preds.Granivor, function(pred){
#   r2.Granivor$R2_marginal - r2(update(m.Granivor, paste("~.-", pred, sep="")))$R2_marginal
# }) %>% set_names(preds.Granivor)
varimp.r2.Granivor <- sapply(preds.Granivor, function(pred){
r2.Granivor$R2_Nagelkerke - r2(update(m.Granivor, paste("~.-", pred, sep="")))$R2_Nagelkerke
}) %>% set_names(preds.Granivor)
# predictions
nds.cont.Granivor <- lapply(preds.cont.Granivor, function(pred){
nd <- lapply(preds.cont.Granivor, function(pr) rep(mean(pull(df, pr)), 100)) %>%
bind_cols %>%
set_names(preds.cont.Granivor)
nd[,pred] <- seq(min(pull(df, pred)),  max(pull(df, pred)), l=100)
mm <- model.matrix(as.formula(paste("~", paste(preds.Granivor, collapse = "+"), sep="")), data=nd)
nd$y <- predict(m.Granivor, newdata = nd, type = "link", se=F)
nd$pvar <- diag(mm %*% tcrossprod(vcov(m.Granivor), mm))
nd
}) %>% set_names(preds.cont.Granivor)
# prediction plots
plots.cont.Granivor <- lapply(preds.cont.Granivor, function(pred){
nd <- nds.cont.Granivor[[pred]]
ggplot(nd, aes(y=exp(y), x=get(pred)*sd(pull(df, orig.preds[pred])) + mean(pull(df, orig.preds[pred])))) +
geom_point(data=df, aes(y=Granivor), alpha = .1) +
geom_line() +
geom_ribbon(aes(ymin = exp(y - 1.96*sqrt(pvar)),
ymax = exp(y + 1.96*sqrt(pvar))), alpha= .3) +
labs(y="Granivor richness", x=orig.preds[pred]) +
theme_bw()
}) %>% set_names(preds.cont.Granivor)
outs.Granivor = list(
model = m.Granivor,
summary = s.Granivor,
drop = drop.Granivor,
r2 = r2.Granivor,
varimp = varimp.r2.Granivor,
preds = preds.Granivor,
preds.cont = preds.cont.Granivor,
preds.fact = NULL,
nds.cont = nds.cont.Granivor,
nds.fact = NULL
)
save(outs.Granivor, file = "outs.Granivor.RData")
drops %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
?pivot_wider
drops %>%
select("Pr(Chi)", response) %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
drops %>%
select(4,5) %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
drops %>%
select(4:5) %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
drops %>%
select(4:5)
drops %>%
rownames_to_column("predictor") %>%
select("Pr(Chi)",response,predictor) %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = Pr(Chi) < 0.05)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = get("Pr(Chi)") < 0.05) %>%
select("Pr(Chi)",response,predictor) %>%
pivot_wider(values_from = "Pr(Chi)", names_from = response)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = get("Pr(Chi)") < 0.05) %>%
select(sign,response,predictor) %>%
pivot_wider(values_from = sign, names_from = response)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = get("Pr(Chi)") < 0.05) %>%
# select(sign,response,predictor) %>%
pivot_wider(id_cols = predictor, values_from = sign, names_from = response)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = get("Pr(Chi)") < 0.05) %>%
# select(sign,response,predictor) %>%
pivot_wider(id_cols = predictor, id_expand = T,  values_from = sign, names_from = response)
drops %>%
rownames_to_column("predictor") %>%
mutate(sign = get("Pr(Chi)") < 0.05) %>%
# select(sign,response,predictor) %>%
pivot_wider(id_cols = predictor, id_expand = F,  values_from = sign, names_from = response)
# anova tables (significances) ------------------------------------------------------------------------
drops <- do.call(
left_join,
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$drop %>%
mutate(response = resp)
})
)
# anova tables (significances) ------------------------------------------------------------------------
drops <- do.call(
left_join,
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$drop %>%
mutate(response = resp) %>%
rownames_to_column("predictor")
}),
by = "predictor"
)
# anova tables (significances) ------------------------------------------------------------------------
drops <- do.call(
left_join,
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$drop %>%
mutate(response = resp) %>%
rownames_to_column("predictor")
}),
join_by = "predictor"
)
?left_join
outs.Species$r2
outs.Species$r2[2]
outs.Species$r2[,2]
outs.Species$r2[2,]
outs.Species$r2[2]
outs.Species$r2[2][1]
outs.Species$r2 %>% length()
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
rr[length(rr)]
})
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
pull(rr[length(rr)], 1)
})
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
rr[length(rr)][[1]]
})
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
rr[length(rr)][[1]]
}) %>% set_names(groups$response) %>%
barplot(sac = 3)
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
rr[length(rr)][[1]]
}) %>% set_names(groups$response) %>%
barplot(las = 3)
outs.Species$varimp
for (resp in groups$response) load(paste("outs",resp,"RData", sep="."))
outs.Species$varimp
outs.Species = list(
model = m.Species,
summary = s.Species,
drop = drop.Species,
r2 = r2.Species,
varimp = varimp.r2.Species,
preds = preds.Species,
preds.cont = preds.cont.Species,
preds.fact = preds.fact.Species,
nds.cont = nds.cont.Species,
nds.fact = nds.fact.Species
)
save(outs.Species, file = "outs.Species.RData")
for (resp in groups$response) load(paste("outs",resp,"RData", sep="."))
outs.Species$varimp
outs.Species$varimp %>% as.data.frame()
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor")
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor")
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:9)
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10)
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw()
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw() +
theme(axis.text.x = element_text(angle=90))
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust=1))
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
# r2 values -------------------------------------------------------------------------------------------
sapply(groups$response, function(resp){
rr = get(paste("outs",resp,sep="."))$r2
rr[length(rr)][[1]]
}) %>% set_names(groups$response) %>%
barplot(las = 3)
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
groups <- data.frame(response = c("Species","Farmland", "Woodland", "Ground", "Shrub", "Canopy",
"Cavity", "Insect", "Granivor"),
type = c("All", "Landsclape", "Landscape", "Nesting", "Nesting", "Nesting",
"Nesting", "Diet", "Diet")) %>%
mutate(reponse = factor(response, levels=response))
# variable importances --------------------------------------------------------------------------------
lapply(groups$response, function(resp){
get(paste("outs",resp,sep="."))$varimp %>%
as.data.frame() %>%
set_names(resp) %>%
rownames_to_column("predictor")
}) %>%
reduce(left_join, by="predictor") %>%
pivot_longer(2:10) %>%
ggplot(aes(x=predictor, y=value)) +
geom_col() +
facet_wrap(~name) +
theme_bw() +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))
df$Distance
table(df$Distance)
View(m.Species)
View(df)
m.Species2 <- glmer(Species~Type*(e2_sc+e3_sc+field+meadow+ruderal+water+forest_sc+village_sc+traffic_sc+alt_sc)+
(1|Highway/transect), data=df, family="poisson")
m.Species2 <- glmer(Species~Type*(e2_sc+e3_sc+field+meadow+ruderal+water+forest_sc+village_sc+traffic_sc+alt_sc)+
(1|Highway), data=df, family="poisson")
summary(m.Species)
summary(m.Species2)
drop1(m.Species2, test="Chisq")
m.Species3 <- glmer(Species~distance_sc+e2_sc+e3_sc+field+meadow+ruderal+water+forest_sc+village_sc+traffic_sc+alt_sc+distance_sc:traffic_sc+
(1|Highway/transect), data=df, family="poisson")
summary(m.Species3)
drop1(m.Species3, test="Chisq")
# Data -------------------------------------------------------------------------------------------------------------------------
df <- read_xlsx("Data_Štěpán_Hladík 30.8.2023.xlsx", sheet=1) %>%
mutate(forest_sc = scale(Forest),
village_sc = scale(Village),
distance_sc = scale(Distance),
traffic_sc = scale(Traffic_volume),
alt_sc = scale(Altitude),
e2_sc = scale(E2),
e3_sc = scale(E3),
water = as.factor(Water),
ruderal = as.factor(Ruderal),
meadow = as.factor(Meadow),
field = as.factor(Field),
noise = as.factor(Noise),
transect = sapply(ID, function(id) substr(id, 1, str_length(id)-1))
)
orig.preds <- c(forest_sc="Forest", village_sc="Village", distance_sc="Distance", traffic_sc="Traffic_volume", alt_sc="Altitude",
e2_sc="E2", e3_sc="E3", water="Water", ruderal="Ruderal", meadow="Meadow", field="Field", noise="Noise")
m.Species4 <- glmer(Species~noise*(e2_sc+e3_sc+field+meadow+ruderal+water+forest_sc+village_sc+alt_sc)+
(1|Highway), data=df, family="poisson")
m.Species4 <- glmer(Species~noise*(e2_sc+e3_sc+field+meadow+ruderal+water+forest_sc+village_sc+alt_sc)+
(1|Highway), data=df, family="poisson")
summary(m.Species4)
drop1(m.Species4, test="Chisq")
r2(m.Species4)
AIC(m.Species,m.Species2,m.Species3,m.Species4)
